import { z } from "zod";

export const NodeVersions = z.array(
	z.union([
		z.object({
			version: z.string(),
			date: z.string(),
			files: z.array(z.string()),
			npm: z.string(),
			v8: z.string(),
			uv: z.string(),
			zlib: z.string(),
			openssl: z.string(),
			modules: z.string(),
			lts: z.boolean(),
			security: z.boolean(),
		}),
		z.object({
			version: z.string(),
			date: z.string(),
			files: z.array(z.string()),
			npm: z.string(),
			v8: z.string(),
			uv: z.string(),
			zlib: z.string(),
			openssl: z.string(),
			modules: z.string(),
			lts: z.string(),
			security: z.boolean(),
		}),
		z.object({
			version: z.string(),
			date: z.string(),
			files: z.array(z.string()),
			v8: z.string(),
			uv: z.string(),
			zlib: z.string(),
			openssl: z.string(),
			modules: z.string(),
			lts: z.boolean(),
			security: z.boolean(),
		}),
		z.object({
			version: z.string(),
			date: z.string(),
			files: z.array(z.string()),
			v8: z.string(),
			uv: z.string(),
			openssl: z.string(),
			modules: z.string(),
			lts: z.boolean(),
			security: z.boolean(),
		}),
		z.object({
			version: z.string(),
			date: z.string(),
			files: z.array(z.string()),
			v8: z.string(),
			uv: z.string(),
			modules: z.string(),
			lts: z.boolean(),
			security: z.boolean(),
		}),
		z.object({
			version: z.string(),
			date: z.string(),
			files: z.array(z.string()),
			v8: z.string(),
			modules: z.string(),
			lts: z.boolean(),
			security: z.boolean(),
		}),
		z.object({
			version: z.string(),
			date: z.string(),
			files: z.array(z.string()),
			v8: z.string(),
			lts: z.boolean(),
			security: z.boolean(),
		}),
	]),
);
type NodeVersions = z.infer<typeof NodeVersions>;
